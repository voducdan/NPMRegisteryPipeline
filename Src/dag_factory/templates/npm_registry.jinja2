from datetime import datetime

from airflow import DAG
from airflow.decorators import task, task_group

from Connectors.Databases import database_loader

DEFAULT_START_DATE = datetime(2022,9,17)
DEFAULT_END_DATE = None
DEFAULT_SCHEDULE_INTERVAL = '@daily'

with DAG(
    '{{dag_id}}',
    start_date={% if start_date %}{{ start_date }}{% else %}DEFAULT_START_DATE {% endif %},
    end_date={% if end_date %}{{ end_date }}{% else %}DEFAULT_END_DATE {% endif %},
    schedule_interval={% if schedule_interval %}{{ schedule_interval }}{% else %}DEFAULT_SCHEDULE_INTERVAL {% endif %},
    catchup={{ catchup or False}}
) as dag:

    {% for t in  extract_tasks.tasks %}
    @task
    def {{ t }}():
        return database_loader.{{ t }}()
    {% endfor %}

    {% for dim in  dim_tasks.tasks %}
    @task
    def {{  dim }}(pre_df):
        return database_loader.{{ dim }}(pre_df)
    {% endfor %}

    @task_group
    def extract_task_group():
        {% if not extract_tasks.task_dependency -%}
            return [{% for t in  extract_tasks.tasks %} {{ t }}() {% if not loop.last %},{% endif %}{% endfor %}]
        {% else -%}
            {% set splited_tasks = extract_tasks.task_dependency.split('>>') -%}
            return {% for t in  splited_tasks -%}
                {{ t }}() {% if not loop.last %} >> {% endif %}
            {%- endfor %}
        {%- endif %}

    @task_group
    def dim_task_group(pre_df):
        {% if not dim_tasks.task_dependency -%}
            return [{% for dim in  dim_tasks.tasks %} {{ dim }}(pre_df) {% if not loop.last %},{% endif %}{% endfor %}]
        {% else %}
            {%- set splited_tasks = dim_tasks.task_dependency.split('>>') %}
            return {% for t in  splited_tasks -%}
                {{ t }}(pre_df) {% if not loop.last %} >> {% endif %}
            {%- endfor %}
        {%- endif %}
    
    dim_task_group(extract_task_group())